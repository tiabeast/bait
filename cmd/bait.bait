// This file is part of: bait.
// Copyright (c) 2022 Lukas Neubert.
// Use of this code is governed by an MIT License (see LICENSE.md).
package main

import os
import bait.pref
import bait.token

const TOOLS = ['help']

fun main() {
	args := os.ARGS.slice(1, os.ARGS.len)
	if args.len == 0 {
		exit(launch_tool('help', args))
	}
	prefs := pref.parse_args(args)
	if TOOLS.contains(prefs.command) {
		exit(launch_tool(prefs.command, args))
	}
	match prefs.command {
		'test'{
			exit(run_tests(args.slice(1, args.len), prefs))
		}
	}
	if prefs.command.ends_with('.bait') or os.is_dir(prefs.command) {
		exit(compile(prefs))
	}
	eprintln('Unknown command: bait ' + prefs.command)
	exit(1)
}

fun launch_tool(name string, args []string) i32 {
	exe := os.executable()
	exe_root := os.dir(os.real_path(exe))
	tool_path := os.join_path(exe_root, ['cmd', 'tools', name])
	tool_source := tool_path + '.bait'
	cret := os.system('bait "' + tool_source + '"')
	if cret != 0 {
		return cret
	}
	tool_args := args.join(' ')
	return os.system(tool_path + ' ' + tool_args)
}

fun run_tests(args []string, prefs pref.Preferences) i32 {
	// TODO
	return 1
}

fun compile(prefs pref.Preferences) i32 {
	paths := bait_files_from_dir(os.resource_abs_path('lib/builtin'))
	user_files := get_user_files(prefs.command, prefs)
	paths.push_many(user_files, user_files.len)
	// TODO
	return 1
}

fun get_user_files(path string, prefs pref.Preferences) []string {
	user_files := []string
	is_internal_module_test := false
	if prefs.is_test {
		content := os.read_file(path)
		lines := content.split('\n')
		for i :=0; i < lines.len; i+=1 {
			line := lines[i]
			if line.starts_with('package'){
				if line.starts_with('package main') {
					break
				}
				is_internal_module_test=true
				break
			}
		}
	}
	if is_internal_module_test {
		user_files.push(path)
		path = os.dir(path)
	}
	if not os.is_dir(path) and os.exists(path) and path.ends_with('.bait') {
		user_files.push(path)
	} else if os.is_dir(path) {
		df := bait_files_from_dir(path)
		user_files.push_many(df, df.len)
	}
	return user_files
}

fun bait_files_from_dir(dir string) []string {
	all_files := os.ls(dir)
	files := []string
	for i := 0; i <all_files.len ; i += 1 {
		f := all_files[i]
		if f.ends_with('_test.bait') {
			continue
		}
		if f.ends_with('.bait') {
			files.push(dir + '/' + f)
		}
	}
	return files
}
