// This file is part of: bait programming language
// Copyright (c) 2022 Lukas Neubert
// Use of this code is governed by an MIT License (see LICENSE.md).
package builtin

const DIGIT_PAIRS = '000102030405060708091011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798'

fun (n i8) str() string{
	return i64(n).str()
}

fun (n i16) str() string{
	return i64(n).str()
}

fun (n i32) str() string{
	return i64(n).str()
}

fun (n i64) str() string{
	max := 20
	buf := []byte{len: max}
	i := max

	is_neg := false
	if n < 0 {
		n = -n
		is_neg = true
	}
	for n >= 100 {
		j := n % 100 * 2
		n /= 100
		i -= 2
		buf[i+1] = DIGIT_PAIRS[j+1]
		buf[i+0] = DIGIT_PAIRS[j+0]
	}

	j := n * 2
	i -= 1
	buf[i] = DIGIT_PAIRS[j+1]
	if n >= 10 {
	i -= 1
		buf[i] = DIGIT_PAIRS[j]
	}

	if is_neg {
		i -= 1
		buf[i] = `-`
	}

	return buf.slice(i, buf.len).str()
}
